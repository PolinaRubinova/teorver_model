package models;

import java.util.Random;

public class model_15_2 {

    // На каждой из двух параллельных прямых независимо отмечены
    // точки с постоянным интервалом l = 100м.
    // Определить вероятность того, что хотя бы одна точка попадает
    // внуть бесконечной полосы шириной D = 25м, которая расположения
    // в той же плоскости, что и прямые, таким образом,
    // что ограничивающие ее прямые перпендикулярны данным прямым,
    // а середина полосы равномерно распределена на интервале l.

    // Алгоритм:
    // Примем положение точки на первой прямой за константу,
    // будем генерировать случайным образом положение точки
    // на второй прямой, а также положение полосы.
    // Далее будем проверять, попала ли какая либо точка на полосу.
    // В конце посчитаем вероятность.

/*
import random
tests = 1000000
success = 0
L = 100
D = 25
shift = 1000

for _ in range(tests):
fl = False
x1 = shift
x2 = shift + L * random.random()
d = shift + L * random.random() - D / 2

if abs(x1 - d) <= D / 2: fl = True
if abs(x2 - d) <= D / 2: fl = True
if fl: success += 1

print(success / tests)
Задаем число испытаний (1000000) и накапливаем статистику.
В результате выполнения получаем, что вероятность равна 0.4377.
Полученный результат можно сравнить с аналитическим решением: 0.4375.
*/

    private static Random random = new Random();

    private static int newDigit () { return random.nextInt(10); }

    public static int main() {

        return 0;
    }
}